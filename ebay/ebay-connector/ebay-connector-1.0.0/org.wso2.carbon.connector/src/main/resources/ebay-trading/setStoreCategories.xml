<template name="setStoreCategories" xmlns="http://ws.apache.org/ns/synapse">
	<parameter name="action" description="The type of action (Add, Move, Delete, or Rename) to carry out for the specified categories." />
	<parameter name="destinationParentCategoryID" description="The category under which the listed categories will be located." />
	<parameter name="itemDestinationCategoryID" description="The destination child category under which the displaced items will be moved." />
	<parameter name="storeCategories" description="The store categories on which to act." />

	<sequence>
		<property name="uri.var.action" expression="$func:action" />
		<property name="uri.var.destinationParentCategoryID" expression="$func:destinationParentCategoryID" />
		<property name="uri.var.itemDestinationCategoryID" expression="$func:itemDestinationCategoryID" />
		<property name="uri.var.storeCategories" expression="$func:storeCategories" />

		<payloadFactory media-type="xml">
			<format>
				<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ebl="urn:ebay:apis:eBLBaseComponents">
					<soapenv:Header>
						<ebl:RequesterCredentials>
							<ebl:eBayAuthToken>$1</ebl:eBayAuthToken>
						</ebl:RequesterCredentials>
					</soapenv:Header>
					<soapenv:Body>
						<ebl:SetStoreCategoriesRequest>
							<ebl:Action EnumType="StoreCategoryUpdateActionCodeType">$2</ebl:Action>
							<ebl:StoreCategories ComplexType="StoreCustomCategoryArrayType">$3</ebl:StoreCategories>
							<ebl:Version>$4</ebl:Version>
						</ebl:SetStoreCategoriesRequest>
					</soapenv:Body>
				</soapenv:Envelope>
			</format>
			<args>
				<arg expression="get-property('uri.var.authToken')" />
				<arg expression="get-property('uri.var.action')" />
				<arg expression="get-property('uri.var.storeCategories')" />
				<arg expression="get-property('uri.var.version')" />
			</args>
		</payloadFactory>

		<script language="js">
                <![CDATA[
                       
                     var destinationParentCategoryID = mc.getProperty('uri.var.destinationParentCategoryID');
                     var itemDestinationCategoryID = mc.getProperty('uri.var.itemDestinationCategoryID');
                     var errorLanguage = mc.getProperty('uri.var.errorLanguage');
                     var messageId = mc.getProperty('uri.var.messageId');
                     var warningLevel = mc.getProperty('uri.var.warningLevel');
                              
                     var payload = mc.getPayloadXML();
                       
                     if (destinationParentCategoryID != null && destinationParentCategoryID != "") { 
                         payload.SetStoreCategoriesRequest += <ebl:DestinationParentCategoryID xmlns:ebl="urn:ebay:apis:eBLBaseComponents">{destinationParentCategoryID}</ebl:DestinationParentCategoryID>; 
                     }
                     
                     if (itemDestinationCategoryID != null && itemDestinationCategoryID != "") { 
                         payload.SetStoreCategoriesRequest += <ebl:ItemDestinationCategoryID xmlns:ebl="urn:ebay:apis:eBLBaseComponents">{itemDestinationCategoryID}</ebl:ItemDestinationCategoryID>; 
                     }
                           
                     if (errorLanguage != null && errorLanguage != "") { 
                         payload.SetStoreCategoriesRequest += <ebl:ErrorLanguage xmlns:ebl="urn:ebay:apis:eBLBaseComponents">{errorLanguage}</ebl:ErrorLanguage>; 
                     }
                     
                     if (messageId != null && messageId != "") { 
                         payload.SetStoreCategoriesRequest += <ebl:MessageID xmlns:ebl="urn:ebay:apis:eBLBaseComponents">{messageId}</ebl:MessageID>; 
                     }
                           
                     if (warningLevel != null && warningLevel != "") {
                         payload.SetStoreCategoriesRequest += <ebl:WarningLevel xmlns:ebl="urn:ebay:apis:eBLBaseComponents">{warningLevel}</ebl:WarningLevel>;  
                     } 
                                                       
                     mc.setPayloadXML(payload);
                           
                ]]>
		</script>

		<property name="uri.var.endpoint" expression="fn:concat(get-property('uri.var.apiUrl'), '?')" />
		<property name="uri.var.endpoint" expression="fn:concat(get-property('uri.var.endpoint'), 'callname=SetStoreCategories')" />
		<property name="uri.var.endpoint" expression="fn:concat(get-property('uri.var.endpoint'), '&amp;siteid=', get-property('uri.var.siteId'))" />
		<property name="uri.var.endpoint" expression="fn:concat(get-property('uri.var.endpoint'), '&amp;appid=', get-property('uri.var.appId'))" />
		<property name="uri.var.endpoint" expression="fn:concat(get-property('uri.var.endpoint'), '&amp;version=', get-property('uri.var.version'))" />
		<property name="uri.var.endpoint" expression="fn:concat(get-property('uri.var.endpoint'), '&amp;routing=', get-property('uri.var.routing'))" />

		<header name="To" expression="get-property('uri.var.endpoint')" />

		<header name="Action" value="SetStoreCategories" />

		<call>
			<endpoint>
				<default format="soap11" />
			</endpoint>
		</call>

		<!-- Remove custom header information in response -->
		<header name="X-EBAY-API-SERVER-NAME" scope="transport" action="remove" />
		<header name="X-EBAY-ESB-CALL-NAME" scope="transport" action="remove" />
		<header name="X-EBAY-ESB-GUID" scope="transport" action="remove" />
		<header name="X-EBAY-ESB-SITEID" scope="transport" action="remove" />

	</sequence>
</template>