<template name="findProducts" xmlns="http://ws.apache.org/ns/synapse">
  
  <parameter name="includeSelector" description="Defines standard subsets of fields to return within the response."/>
  <parameter name="availableItemsOnly" description="Retrieve data for products that have been used to pre-fill active listings."/>
  <parameter name="domainName" description="Named grouping of categories."/>
  <parameter name="productId" description="Retrieve product details for one specific product."/>
  <parameter name="productIdType" description="The type of the product."/>
  <parameter name="queryKeywords" description="The product query keyword."/>
  <parameter name="productSort" description="The product sort."/>
  <parameter name="sortOrder" description="The product sort order."/>
  <parameter name="maxEntries" description="The maximum entries."/>
  <parameter name="pageNumber" description="The page number."/>
  <parameter name="categoryId" description="The id of the store category."/>
  <parameter name="hideDuplicateItems" description="Hide duplicate items."/> 
  
  <sequence>
    <property name="uri.var.includeSelector" expression="$func:includeSelector"/>
    <property name="uri.var.availableItemsOnly" expression="$func:availableItemsOnly"/>
    <property name="uri.var.domainName" expression="$func:domainName"/>
    <property name="uri.var.productId" expression="$func:productId"/>
    <property name="uri.var.productIdType" expression="$func:productIdType"/>
    <property name="uri.var.queryKeywords" expression="$func:queryKeywords"/>
    <property name="uri.var.productSort" expression="$func:productSort"/>
    <property name="uri.var.sortOrder" expression="$func:sortOrder"/>
    <property name="uri.var.maxEntries" expression="$func:maxEntries"/>
    <property name="uri.var.pageNumber" expression="$func:pageNumber"/>
    <property name="uri.var.categoryId" expression="$func:categoryId"/>
    <property name="uri.var.hideDuplicateItems" expression="$func:hideDuplicateItems"/>
    
    
    <payloadFactory media-type="xml">
      <format>
        <FindProductsRequest xmlns="urn:ebay:apis:eBLBaseComponents">
		</FindProductsRequest>​​
      </format>
    </payloadFactory>
    
    <script language="js">
			<![CDATA[
			
				//request body param variables
		        var includeSelector = mc.getProperty('uri.var.includeSelector'); 
				var availableItemsOnly = mc.getProperty('uri.var.availableItemsOnly'); 
				var domainName = mc.getProperty('uri.var.domainName');
				var productId = mc.getProperty('uri.var.productId');
				var productIdType =mc.getProperty('uri.var.productIdType');
				var queryKeywords = mc.getProperty('uri.var.queryKeywords');
				var productSort = mc.getProperty('uri.var.productSort'); 
				var sortOrder = mc.getProperty('uri.var.sortOrder'); 
				var maxEntries = mc.getProperty('uri.var.maxEntries'); 
				var pageNumber = mc.getProperty('uri.var.pageNumber'); 
				var categoryId = mc.getProperty('uri.var.categoryId'); 
				var hideDuplicateItems = mc.getProperty('uri.var.hideDuplicateItems'); 
				var messageId = mc.getProperty('uri.var.messageId'); 
				
				var payload = mc.getPayloadXML();
				
				
				if (includeSelector != null && includeSelector != "") { 
					payload.FindProductsRequest+=<IncludeSelector xmlns="urn:ebay:apis:eBLBaseComponents">{includeSelector}</IncludeSelector>; 
				}
				
				if (availableItemsOnly != null && availableItemsOnly != "") { 
					payload.FindProductsRequest+=<AvailableItemsOnly xmlns="urn:ebay:apis:eBLBaseComponents">{availableItemsOnly}</AvailableItemsOnly>; 
				}
				
				if (domainName != null && domainName != "") { 
					payload.FindProductsRequest+=<DomainName xmlns="urn:ebay:apis:eBLBaseComponents">{domainName}</DomainName>; 
				}
				
				if (productId != null && productId != "") { 
					payload.FindProductsRequest+=<ProductID xmlns="urn:ebay:apis:eBLBaseComponents" type={productIdType}>{productId}</ProductID>; 
				}
				
				if (queryKeywords != null && queryKeywords != "") { 
					payload.FindProductsRequest+=<QueryKeywords xmlns="urn:ebay:apis:eBLBaseComponents">{queryKeywords}</QueryKeywords>; 
				}
				
				if (productSort != null && productSort != "") { 
					payload.FindProductsRequest+=<ProductSort xmlns="urn:ebay:apis:eBLBaseComponents">{productSort}</ProductSort>; 
				}
				
				if (sortOrder != null && sortOrder != "") { 
					payload.FindProductsRequest+=<SortOrder xmlns="urn:ebay:apis:eBLBaseComponents">{sortOrder}</SortOrder>; 
				}
				
				if (maxEntries != null && maxEntries != "") { 
					payload.FindProductsRequest+=<MaxEntries xmlns="urn:ebay:apis:eBLBaseComponents">{maxEntries}</MaxEntries>; 
				}
				
				if (pageNumber != null && pageNumber != "") { 
					payload.FindProductsRequest+=<PageNumber xmlns="urn:ebay:apis:eBLBaseComponents">{pageNumber}</PageNumber>; 
				}
				
				if (categoryId != null && categoryId != "") { 
					payload.FindProductsRequest+=<CategoryID xmlns="urn:ebay:apis:eBLBaseComponents">{categoryId}</CategoryID>; 
				}
				
				if (hideDuplicateItems != null && hideDuplicateItems != "") { 
					payload.FindProductsRequest+=<HideDuplicateItems xmlns="urn:ebay:apis:eBLBaseComponents">{hideDuplicateItems}</HideDuplicateItems>; 
				}
				
				if (messageId != null && messageId != "") { 
					payload.FindProductsRequest+=<MessageID xmlns="urn:ebay:apis:eBLBaseComponents">{messageId}</MessageID>;
				}
				mc.setPayloadXML(payload);
			]]>
		</script>
    <property name="isShoppingApi" value="true"/>
	<property name="X-EBAY-API-APP-ID" expression="get-property('uri.var.appId')" scope="transport" type="STRING" />
	<property name="X-EBAY-API-VERSION" expression="get-property('uri.var.version')" scope="transport" type="STRING" />
	<property name="X-EBAY-API-SITE-ID" expression="get-property('uri.var.siteId')" scope="transport" type="STRING" />
	<property name="X-EBAY-API-CALL-NAME" value="FindProducts" scope="transport" type="STRING" />
	<property name="X-EBAY-API-REQUEST-ENCODING" value="SOAP" scope="transport" type="STRING" />
	
	
    <call>
		<endpoint>
			<http method="post" uri-template="{uri.var.apiUrl}" />
		</endpoint>
	</call>
    
    <!-- Remove custom header information in response -->
	<header name="X-EBAY-API-BUILD-TAG" scope="transport" action="remove" />
	<header name="X-EBAY-API-POOL-NAME" scope="transport" action="remove" />
	<header name="X-EBAY-ESB-GUID" scope="transport" action="remove" />
	<header name="X-EBAY-API-SERVER-NAME" scope="transport" action="remove" />
  </sequence>
  
</template>